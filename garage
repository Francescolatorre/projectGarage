#!/bin/bash

# Project Garage CLI - Command Management Tool
# Manage and search Claude custom commands across projects

GARAGE_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
COMMANDS_DIR="$GARAGE_DIR/claude-commands"
CATALOG_FILE="$COMMANDS_DIR/CATALOG.md"

# Colors
RED='\033[0;31m'
GREEN='\033[0;32m'
BLUE='\033[0;34m'
YELLOW='\033[1;33m'
PURPLE='\033[0;35m'
CYAN='\033[0;36m'
NC='\033[0m'

show_help() {
    echo -e "${BLUE}🚀 Project Garage - Claude Commands Manager${NC}"
    echo ""
    echo -e "${GREEN}Commands:${NC}"
    echo -e "  ${YELLOW}browse [category]${NC}     - Browse available commands"
    echo -e "  ${YELLOW}search <keyword>${NC}      - Search commands by keyword"
    echo -e "  ${YELLOW}install <cmd> <path>${NC}  - Install command to project"
    echo -e "  ${YELLOW}add <file> [category]${NC} - Add new command to library"
    echo -e "  ${YELLOW}sync <project-path>${NC}   - Sync commands with project"
    echo -e "  ${YELLOW}stats${NC}                 - Show library statistics"
    echo ""
    echo -e "${PURPLE}Categories:${NC} productivity, quality, architecture, ai-integration, devops"
}

browse_commands() {
    local category="$1"

    if [ -z "$category" ]; then
        echo -e "${CYAN}📚 All Available Commands:${NC}\n"
        find "$COMMANDS_DIR" -name "*.md" -not -name "CATALOG.md" | while read -r file; do
            basename=$(basename "$file")
            category=$(basename $(dirname "$file"))
            desc=$(grep "^description:" "$file" | cut -d: -f2- | xargs)
            echo -e "${GREEN}[$category]${NC} ${YELLOW}$basename${NC}"
            echo -e "  ${desc}"
            echo ""
        done
    else
        local cat_dir="$COMMANDS_DIR/$category"
        if [ -d "$cat_dir" ]; then
            echo -e "${CYAN}📂 Commands in $category:${NC}\n"
            for file in "$cat_dir"/*.md; do
                [ -f "$file" ] || continue
                basename=$(basename "$file")
                desc=$(grep "^description:" "$file" | cut -d: -f2- | xargs)
                echo -e "${YELLOW}$basename${NC}"
                echo -e "  ${desc}"

                # Show use case
                use_case=$(awk '/## Use Case/,/##/ {if (!/##/) print}' "$file" | head -n 3 | tail -n 2)
                if [ -n "$use_case" ]; then
                    echo -e "  ${PURPLE}Use:${NC} $use_case"
                fi
                echo ""
            done
        else
            echo -e "${RED}Category '$category' not found${NC}"
        fi
    fi
}

search_commands() {
    local keyword="$1"
    echo -e "${BLUE}🔍 Searching for '$keyword'...${NC}\n"

    grep -r "$keyword" "$COMMANDS_DIR" --include="*.md" -l 2>/dev/null | while read -r file; do
        basename=$(basename "$file")
        category=$(basename $(dirname "$file"))
        desc=$(grep "^description:" "$file" | cut -d: -f2- | xargs)

        echo -e "${GREEN}[$category]${NC} ${YELLOW}$basename${NC}"
        echo -e "  ${desc}"
        echo -e "  ${CYAN}Path:${NC} $file"

        # Show matching context
        match=$(grep -i "$keyword" "$file" | head -1)
        echo -e "  ${PURPLE}Match:${NC} ...${match:0:60}..."
        echo ""
    done
}

install_command() {
    local command="$1"
    local target_path="$2"

    if [ -z "$command" ] || [ -z "$target_path" ]; then
        echo -e "${RED}Usage: garage install <command-name> <target-path>${NC}"
        return 1
    fi

    # Find command file
    local cmd_file=$(find "$COMMANDS_DIR" -name "$command.md" -o -name "$command" | head -1)

    if [ -z "$cmd_file" ] || [ ! -f "$cmd_file" ]; then
        echo -e "${RED}Command '$command' not found${NC}"
        return 1
    fi

    # Create target directory if needed
    mkdir -p "$target_path"

    # Copy command
    cp "$cmd_file" "$target_path/"

    echo -e "${GREEN}✅ Installed $(basename "$cmd_file") to $target_path${NC}"

    # Show usage hint
    echo -e "${CYAN}To use in your project:${NC}"
    echo "  claude-code --custom $target_path/$(basename "$cmd_file")"
}

add_command() {
    local file="$1"
    local category="${2:-productivity}"

    if [ ! -f "$file" ]; then
        echo -e "${RED}File not found: $file${NC}"
        return 1
    fi

    local basename=$(basename "$file")
    local target="$COMMANDS_DIR/$category/$basename"

    mkdir -p "$COMMANDS_DIR/$category"
    cp "$file" "$target"

    echo -e "${GREEN}✅ Added $basename to $category category${NC}"

    # Update catalog
    update_catalog
}

show_stats() {
    echo -e "${CYAN}📊 Project Garage Statistics${NC}\n"

    local total_commands=$(find "$COMMANDS_DIR" -name "*.md" -not -name "CATALOG.md" | wc -l)
    local categories=$(ls -d "$COMMANDS_DIR"/*/ 2>/dev/null | wc -l)

    echo -e "Total Commands: ${GREEN}$total_commands${NC}"
    echo -e "Categories: ${GREEN}$categories${NC}"
    echo ""

    echo -e "${YELLOW}Commands by Category:${NC}"
    for dir in "$COMMANDS_DIR"/*/; do
        [ -d "$dir" ] || continue
        category=$(basename "$dir")
        count=$(find "$dir" -name "*.md" | wc -l)
        echo -e "  $category: $count"
    done

    echo ""
    echo -e "${PURPLE}Recent Additions:${NC}"
    find "$COMMANDS_DIR" -name "*.md" -not -name "CATALOG.md" -exec ls -t {} + | head -3 | while read -r file; do
        echo "  - $(basename "$file") ($(basename $(dirname "$file")))"
    done
}

update_catalog() {
    echo -e "${BLUE}Updating catalog...${NC}"
    # This would update the CATALOG.md file
    # For now, just remind to update manually
    echo -e "${YELLOW}Remember to update CATALOG.md with the new command${NC}"
}

sync_commands() {
    local project_path="$1"

    if [ -z "$project_path" ]; then
        echo -e "${RED}Usage: garage sync <project-path>${NC}"
        return 1
    fi

    local project_commands="$project_path/.claude-code/commands"

    if [ ! -d "$project_commands" ]; then
        echo -e "${YELLOW}No .claude-code/commands directory found in project${NC}"
        echo -e "Creating directory..."
        mkdir -p "$project_commands"
    fi

    echo -e "${CYAN}🔄 Syncing commands...${NC}"

    # Export commands from project to garage
    for file in "$project_commands"/*.md; do
        [ -f "$file" ] || continue
        basename=$(basename "$file")
        if [ ! -f "$COMMANDS_DIR/productivity/$basename" ]; then
            echo -e "  ${GREEN}+ Exporting${NC} $basename to garage"
            cp "$file" "$COMMANDS_DIR/productivity/"
        fi
    done

    echo -e "${GREEN}✅ Sync complete${NC}"
}

# Main command routing
case "$1" in
    browse)
        browse_commands "$2"
        ;;
    search)
        search_commands "$2"
        ;;
    install)
        install_command "$2" "$3"
        ;;
    add)
        add_command "$2" "$3"
        ;;
    sync)
        sync_commands "$2"
        ;;
    stats)
        show_stats
        ;;
    *)
        show_help
        ;;
esac